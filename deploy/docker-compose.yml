# -----------------------------------------------------------------------------
# Docker Compose for IGLM IAM System – REV 1 (2025-04-24)
# -----------------------------------------------------------------------------
services:

# --- HRMS Database (Mock PostgreSQL) ---
  hrms-db:
    image: postgres:14 # Use a standard Postgres image
    container_name: iglm-hrms-db # A descriptive name
    restart: unless-stopped
    env_file: # Load HRMS specific credentials from .env
      - .env
    environment:
      # Use the HRMS specific variables from your .env file
      - POSTGRES_USER=${HRMS_DB_USER}
      - POSTGRES_PASSWORD=${HRMS_DB_PASSWORD}
      - POSTGRES_DB=${HRMS_DB_NAME}
    volumes:
      # Persistent volume for HRMS data
      - hrms-db-data:/var/lib/postgresql/data
      # --- Optional: Mount an initialization script to populate mock data ---
      # Create scripts/init-hrms-db.sql with your table/view creation and sample INSERTs
      # - ./scripts/init-hrms-db.sql:/docker-entrypoint-initdb.d/init-hrms-db.sql
      # --- End Optional Mount ---
    networks:
      - backend

  # --- Configuration Database (Central) ---
  config-db:
    image: postgres:14
    container_name: iglm-config-db
    restart: unless-stopped
    env_file: [.env]
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - config-db-data:/var/lib/postgresql/data
      - ./scripts/init-idcs-db.sql:/docker-entrypoint-initdb.d/init-idcs-db.sql
    networks: [backend]

  # --- Messaging / Event Bus (RabbitMQ) ---
  rabbitmq:
    image: rabbitmq:3-management
    container_name: iglm-rabbitmq
    restart: unless-stopped
    env_file: [.env]
    environment:
      - RABBITMQ_DEFAULT_USER=${MQ_USER}
      - RABBITMQ_DEFAULT_PASS=${MQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks: [backend]

  # --- Distributed Cache (Redis) ---
  redis:
    image: redis:6-alpine
    container_name: iglm-redis
    restart: unless-stopped
    env_file: [.env]
    command: >
      redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
    networks: [backend]

  # --- Service Discovery (Consul) ---
  consul:
    image: consul:1.14
    container_name: iglm-consul
    restart: unless-stopped
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
    networks: [backend]

  # --- Identity Collection Service ---
  idcs-service:
    build:
      context: ..                                   
      dockerfile: services/identity-collection-service/Dockerfile
    container_name: iglm-idcs
    restart: on-failure
    env_file: [.env]
    environment:
      # Override for inside‐container connectivity
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    ports:
      - "${IDCS_PORT}:${IDCS_PORT}"
    depends_on:
      - config-db
      - rabbitmq
      - redis
      - consul
      - hrms-db
    networks: [backend]

  # --- Joiner Service ---
  joiner-service:
    build:
      context: ..
      dockerfile: services/joiner-service/Dockerfile
    container_name: iglm-joiner
    restart: on-failure
    env_file: [.env]
    ports:
      - "${JOINER_PORT}:${JOINER_PORT}"
    depends_on: [config-db, rabbitmq, redis, consul]
    networks: [backend]

  # --- Mover Service ---
  mover-service:
    build:
      context: ..
      dockerfile: services/mover-service/Dockerfile
    container_name: iglm-mover
    restart: on-failure
    env_file: [.env]
    ports:
      - "${MOVER_PORT}:${MOVER_PORT}"
    depends_on: [config-db, rabbitmq, redis, consul]
    networks: [backend]

  # --- Leaver Service ---
  leaver-service:
    build:
      context: ..
      dockerfile: services/leaver-service/Dockerfile
    container_name: iglm-leaver
    restart: on-failure
    env_file: [.env]
    ports:
      - "${LEAVER_PORT}:${LEAVER_PORT}"
    depends_on: [config-db, rabbitmq, redis, consul]
    networks: [backend]

  # --- Provisioning Service ---
  provisioning-service:
    build:
      context: ..
      dockerfile: services/provisioning-service/Dockerfile
    container_name: iglm-provisioning
    restart: on-failure
    env_file: [.env]
    ports:
      - "${PROVISIONING_PORT}:${PROVISIONING_PORT}"
    depends_on: [config-db, rabbitmq, redis, consul]
    networks: [backend]

  # --- API Gateway ---
  api-gateway:
    build:
      context: ..
      dockerfile: gateway/Dockerfile
    container_name: iglm-api-gateway
    restart: on-failure
    env_file: [.env]
    ports:
      - "3000:3000"
    depends_on:
      - idcs-service
      - joiner-service
      - mover-service
      - leaver-service
      - provisioning-service
    networks: [backend]

# -----------------------------------------------------------------------------
# Networks & Volumes
# -----------------------------------------------------------------------------
volumes:
  config-db-data:
    driver: local
  hrms-db-data:
    driver: local

networks:
  backend:
    driver: bridge

